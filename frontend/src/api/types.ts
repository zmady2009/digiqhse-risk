/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/risks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List risks */
        get: operations["listRisks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risks/{riskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get risk detail */
        get: operations["getRisk"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assessments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create assessment */
        post: operations["createAssessment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assessments/{assessmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get assessment detail */
        get: operations["getAssessment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update assessment */
        patch: operations["updateAssessment"];
        trace?: never;
    };
    "/action-plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List action plans */
        get: operations["listActionPlans"];
        put?: never;
        /** Create action plan */
        post: operations["createActionPlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List documents */
        get: operations["listDocuments"];
        put?: never;
        /** Create document metadata */
        post: operations["createDocument"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/{riskId}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download risk report PDF */
        get: operations["getRiskReportPdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PaginationMeta: {
            page: number;
            size: number;
            totalItems: number;
            totalPages: number;
        };
        Risk: {
            id: number;
            code: string;
            label: string;
            unitId: number;
            /** Format: float */
            score: number;
            /** @enum {string} */
            status: "open" | "in_progress" | "closed";
            /** Format: date-time */
            updatedAt: string;
        };
        Assessment: {
            id: number;
            riskId: number;
            method: string;
            /** Format: float */
            score: number;
            notes: string;
            attachments: components["schemas"]["Attachment"][];
            /** Format: date-time */
            updatedAt: string;
        };
        AssessmentCreateInput: {
            riskId: number;
            method: string;
            /** Format: float */
            score: number;
            notes?: string;
            attachments?: components["schemas"]["AttachmentCreateInput"][];
        };
        AssessmentUpdateInput: {
            method?: string;
            /** Format: float */
            score?: number;
            notes?: string;
            attachments?: components["schemas"]["AttachmentCreateInput"][];
            /**
             * Format: date-time
             * @description Last known update timestamp for optimistic locking
             */
            updatedAt?: string;
        };
        Attachment: {
            id: number;
            name: string;
            /** Format: uri */
            url: string;
        };
        AttachmentCreateInput: {
            name: string;
            /** Format: uri */
            url: string;
        };
        ActionPlan: {
            id: number;
            riskId: number;
            title: string;
            description?: string;
            /** Format: date */
            dueDate?: string;
            owner?: string;
            /** @enum {string} */
            status: "planned" | "in_progress" | "done";
        };
        ActionPlanCreateInput: {
            riskId: number;
            title: string;
            description?: string;
            /** Format: date */
            dueDate?: string;
            owner?: string;
            /** @enum {string} */
            status?: "planned" | "in_progress" | "done";
        };
        Document: {
            id: number;
            riskId: number;
            name: string;
            /** Format: uri */
            url: string;
            type: string;
            /** Format: date-time */
            createdAt: string;
        };
        DocumentCreateInput: {
            riskId: number;
            name: string;
            type: string;
            description?: string;
        };
        RiskPage: components["schemas"]["PaginatedResponse"] & {
            data?: components["schemas"]["Risk"][];
        };
        AssessmentPage: components["schemas"]["PaginatedResponse"] & {
            data?: components["schemas"]["Assessment"][];
        };
        ActionPlanPage: components["schemas"]["PaginatedResponse"] & {
            data?: components["schemas"]["ActionPlan"][];
        };
        DocumentPage: components["schemas"]["PaginatedResponse"] & {
            data?: components["schemas"]["Document"][];
        };
        PaginatedResponse: {
            data: unknown[];
            meta: components["schemas"]["PaginationMeta"];
        };
        ConflictError: components["schemas"]["ProblemDetails"] & {
            /** @description Resource identifier that caused the conflict */
            conflictWith: string;
        };
        /** @description RFC7807 problem details */
        ProblemDetails: {
            /** Format: uri */
            type: string;
            title: string;
            status: number;
            detail?: string;
            /** Format: uri */
            instance?: string;
            traceId?: string;
        };
    };
    responses: {
        /** @description Error response */
        ProblemResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["ProblemDetails"];
            };
        };
    };
    parameters: {
        /** @description Page number starting at 1 */
        PageParam: number;
        /** @description Number of items per page */
        SizeParam: number;
        /** @description Free text search query */
        QueryParam: string;
        /** @description JSON encoded filter object */
        FilterParam: string;
        /** @description Sort clause formatted as field,asc|desc */
        SortParam: string;
        RiskIdPath: number;
        AssessmentIdPath: number;
        RiskIdQuery: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listRisks: {
        parameters: {
            query?: {
                /** @description Page number starting at 1 */
                page?: components["parameters"]["PageParam"];
                /** @description Number of items per page */
                size?: components["parameters"]["SizeParam"];
                /** @description Free text search query */
                query?: components["parameters"]["QueryParam"];
                /** @description Sort clause formatted as field,asc|desc */
                sort?: components["parameters"]["SortParam"];
                /** @description JSON encoded filter object */
                filters?: components["parameters"]["FilterParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of risks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RiskPage"];
                };
            };
            401: components["responses"]["ProblemResponse"];
            default: components["responses"]["ProblemResponse"];
        };
    };
    getRisk: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                riskId: components["parameters"]["RiskIdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Risk detail */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Risk"];
                };
            };
            401: components["responses"]["ProblemResponse"];
            404: components["responses"]["ProblemResponse"];
            default: components["responses"]["ProblemResponse"];
        };
    };
    createAssessment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssessmentCreateInput"];
            };
        };
        responses: {
            /** @description Assessment created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Assessment"];
                };
            };
            400: components["responses"]["ProblemResponse"];
            401: components["responses"]["ProblemResponse"];
            default: components["responses"]["ProblemResponse"];
        };
    };
    getAssessment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assessmentId: components["parameters"]["AssessmentIdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Assessment detail */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Assessment"];
                };
            };
            401: components["responses"]["ProblemResponse"];
            404: components["responses"]["ProblemResponse"];
            default: components["responses"]["ProblemResponse"];
        };
    };
    updateAssessment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assessmentId: components["parameters"]["AssessmentIdPath"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssessmentUpdateInput"];
            };
        };
        responses: {
            /** @description Assessment updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Assessment"];
                };
            };
            400: components["responses"]["ProblemResponse"];
            401: components["responses"]["ProblemResponse"];
            404: components["responses"]["ProblemResponse"];
            /** @description Conflict detected */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictError"];
                };
            };
            default: components["responses"]["ProblemResponse"];
        };
    };
    listActionPlans: {
        parameters: {
            query: {
                riskId: components["parameters"]["RiskIdQuery"];
                /** @description Page number starting at 1 */
                page?: components["parameters"]["PageParam"];
                /** @description Number of items per page */
                size?: components["parameters"]["SizeParam"];
                /** @description Sort clause formatted as field,asc|desc */
                sort?: components["parameters"]["SortParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of action plans */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionPlanPage"];
                };
            };
            401: components["responses"]["ProblemResponse"];
            default: components["responses"]["ProblemResponse"];
        };
    };
    createActionPlan: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActionPlanCreateInput"];
            };
        };
        responses: {
            /** @description Action plan created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionPlan"];
                };
            };
            400: components["responses"]["ProblemResponse"];
            401: components["responses"]["ProblemResponse"];
            default: components["responses"]["ProblemResponse"];
        };
    };
    listDocuments: {
        parameters: {
            query: {
                riskId: components["parameters"]["RiskIdQuery"];
                /** @description Page number starting at 1 */
                page?: components["parameters"]["PageParam"];
                /** @description Number of items per page */
                size?: components["parameters"]["SizeParam"];
                /** @description Sort clause formatted as field,asc|desc */
                sort?: components["parameters"]["SortParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of documents */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentPage"];
                };
            };
            401: components["responses"]["ProblemResponse"];
            default: components["responses"]["ProblemResponse"];
        };
    };
    createDocument: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentCreateInput"];
            };
        };
        responses: {
            /** @description Document metadata created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
            400: components["responses"]["ProblemResponse"];
            401: components["responses"]["ProblemResponse"];
            default: components["responses"]["ProblemResponse"];
        };
    };
    getRiskReportPdf: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                riskId: components["parameters"]["RiskIdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PDF stream */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": string;
                };
            };
            401: components["responses"]["ProblemResponse"];
            404: components["responses"]["ProblemResponse"];
            default: components["responses"]["ProblemResponse"];
        };
    };
}
